#!/usr/bin/env python3

from argparse import ArgumentParser
from fdbk import Reporter
import json
import logging
from os.path import expanduser

from piroommonitor import Sensors, RGBLed

class frange(object):
	def __init__(self, min, max):
		self.__min = float(min)
		self.__max = float(max)

	def __eq__(self, other):
		return other >= self.__min and other <= self.__max

	def __getitem__(self, i):
		if i > 0:
			raise IndexError()
		return self

	def __str__(self):
		return str(self.__min) + "-" + str(self.__max)

logging.basicConfig(filename=expanduser("~/.piroommonitor.log"), filemode="w")
logging.getLogger().setLevel(logging.INFO)

parser = ArgumentParser()

parser.add_argument("db_parameters", nargs="+", type=str, help="Parameters for fdbk DB connection.")
parser.add_argument("--db-connection", type=str, default="ClientConnection", help="fdbk DB connection to use (default=ClientConnection)")
parser.add_argument("--interval", "-i", type=float, default=360.0, help="Data pushing interval in seconds.")
parser.add_argument("--num-samples", "-n", type=int, default=60, help="Number of samples to average during the push interval")
parser.add_argument("--new-topic-id", action="store_true", help="Create new topic ID")
parser.add_argument("--led-pins", "-l", action="append", default=[], type=int, nargs=3, metavar=("R","G","B"), help="LED Pin numbers for R, G, and B")
parser.add_argument("--led-brightness", "-b", type=float, default=0.5, choices=frange(0,1), help="Led brigthness multiplier")
parser.add_argument("--verbose", "-v", action="store_true", help="Be more verbose.")
args = parser.parse_args()

__leds = [RGBLed(*pins) for pins in args.led_pins]

logging.info("Initializing")

if __leds:
	__leds[0](0, 0, 255*args.led_brightness)

try:
	with open(expanduser("~/.piroommonitor.json")) as f:
		topic_id = json.load(f)["topic_id"]
except Exception:
	logging.info("No previous fdbk topic ID found")
	topic_id = None
if args.new_topic_id:
	topic_id = None

sensors = Sensors()
reporter = Reporter(sensors, args.db_connection, args.db_parameters, topic_id=topic_id, interval=args.interval, num_samples=args.num_samples, verbose=args.verbose)

try:
	with open(expanduser("~/.piroommonitor.json"), "w") as f:
		json.dump({"topic_id": reporter.topic_id}, f)
except Exception as e:
	logging.warning("Saving fdbk topic ID failed: " + str(e))

logging.info("Start pushing data")

if __leds:
	__leds[0](0, 255*args.led_brightness, 0)

reporter.start()

if __leds:
	__leds[0](0, 0, 0)

logging.info("Stop pushing data")

sensors.close()
